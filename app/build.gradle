def versionMajor = 2 // incompatible API changes
def versionMinor = 13 // added functionality in a backwards-compatible manner
def versionPatch = 2 // backwards-compatible bug fixes
def versionBuild = 0 // bump for dogfood builds, public betas, etc.


apply plugin: 'com.android.application'
apply plugin: 'android-apt'
apply plugin: 'idea'
apply plugin: 'org.robolectric'

configurations {
    apt
}

android {
    compileSdkVersion 21
    buildToolsVersion '21.1.2'

    packagingOptions {
        // prevents Error: duplicate files during packaging of APK
        // no wildcard support yet
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'LICENSE.txt'
    }

    // This is important, it will run lint checks but won't abort build
    lintOptions {
        abortOnError false
    }


    defaultConfig {
        versionCode versionMajor * 1000000 + versionMinor * 10000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"

        minSdkVersion 9
        targetSdkVersion 21

        applicationId "de.ironjan.mensaupb"
    }


    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
        }

        androidTest.setRoot('src/test')
    }

    buildTypes {
        debug {
            buildConfigField "int", "SYNC_INTERVAL", "60" // 1 minute
            buildConfigField "String", "STW_URL", "\"\""
            testCoverageEnabled = true
        }

        release {
            buildConfigField "int", "SYNC_INTERVAL", "60 * 60 * 24 * 2" // 2 days
            buildConfigField "String", "STW_URL", "\"\""
            testCoverageEnabled = true
        }
    }

    if (project.hasProperty("mensaupb.signing")) {
        println "project has property mensaupb.signing:"
        println project.property("mensaupb.signing")
        if (new File(project.property("mensaupb.signing")).exists()) {
            apply from: project.property("mensaupb.signing");
            println "Applied properties"

        }
    }
}

dependencies {
    compile 'com.android.support:support-v4:21.0.3'
    compile 'com.android.support:appcompat-v7:21.0.3'
    compile 'com.j256.ormlite:ormlite-android:4.48'
    apt "org.androidannotations:androidannotations:3.2"
    compile 'org.androidannotations:androidannotations-api:3.2'
    compile 'com.noveogroup.android:android-logger:1.3.4'
    compile 'se.emilsjolander:stickylistheaders:2.5.2'
    compile 'com.koushikdutta.ion:ion:2.0.0'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.4.2'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.4.2'
    compile 'com.fasterxml.jackson.core:jackson-core:2.4.2'
    compile 'org.springframework.android:spring-android-rest-template:1.0.1.RELEASE'

    testCompile 'junit:junit:4.10'
    testCompile 'org.robolectric:robolectric:3.0-SNAPSHOT'
    // Repetition for autocompletion in android studio
    androidTestCompile 'junit:junit:4.10'
    androidTestCompile 'org.robolectric:robolectric:3.0-SNAPSHOT'
}

robolectric {
    include '**/*Test.class'
    maxHeapSize = "2048m"
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.9'
}

